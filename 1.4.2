先找到马的位置，卒不能在的位置（日字形）
    n[i][j]=1
    n[i-1][j+2]=1
    n[i-1][j-2]=1
    n[i+1][j+2]=1
    n[i+1][j-2]=1
    n[i+2][j+1]=1
    n[i+2][j-1]=1
    n[i-2][j+1]=1
    n[i-2][j-1]=1
(赋初值表示这个位置不能走）
在表示卒行走的方式：向下走一，向右走一
路径数等于不为1的所有之和



学习一下简单算法
1.二分法（力扣704）
区间：左闭右闭；左闭右开
Eg：左闭右闭
left=0;right=num.size-1;while(left<=right){middle=(left+right)/2;if(nums[middle]>target)
right=middle-1;else if(nums[middle]<target)left=middle+1;else return middle;}
return -1;
左闭右开
left=0;right=numsize-1;while(left<right){middle=(left+right)/2;if(nums[middle]>target)
right=middle;else if(nums[middle]<target)left=middle+1;else return middle;}
return -1;
2.移除元素（力扣27）
双指针：
slow=0;for(fast=0;fast<nums.size;fast++){
If(fast(nums[fast]!=val){
nums[slow]=nums[fast];
slow++;}}
return slow;
Ps:fast指针是用来获取新数组中的元素；slow指针是获取我们新数组中需要更新的位置
3.有序数组的平方（力扣977）
-5	1	2	3
→                                                           ←
i                                                             j
双指针：
vector<int>result
k=num.size-1
for(i=0,j=num.size-1;i<=j;){
If(nums[i]*nums[i]>nums[j]*nums[j]){
result[k--]=nums[i]*nums[i];
i++;}
else{
result[k--]=nums[j]*nums[j];
j--;}
}
return result;
4.长度最小的子数组（力扣209）
双指针：
i=0;result=max;(i为起始位置）
for(j=0;j<=num.size;j++)（j为终止位置）
{
sum+=nums[j];
while(sum>=s)（while表示可持续的将i往后移）
{
subl=j-i+1;
result=min(resulet,subl);
sum=sum-nums[i];
i++;}}
return result;
5.螺旋矩阵（力扣59）
循环不变量：左闭右开
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> res(n, vector<int>(n, 0)); // 使用vector定义一个二维数组
        int startx = 0, starty = 0; // 定义每循环一个圈的起始位置
        int loop = n / 2; // 每个圈循环几次，例如n为奇数3，那么loop = 1 只是循环一圈，矩阵中间的值需要单独处理
        int mid = n / 2; // 矩阵中间的位置，例如：n为3， 中间的位置就是(1，1)，n为5，中间位置为(2, 2)
        int count = 1; // 用来给矩阵中每一个空格赋值
        int offset = 1; // 需要控制每一条边遍历的长度，每次循环右边界收缩一位
        int i, j;
        while (loop--) {
            i = startx;
            j = starty;

            // 下面开始的四个for就是模拟转了一圈
            // 模拟填充上行从左到右(左闭右开)
            for (j; j < n - offset; j++) {
                res[i][j] = count++;
            }
            // 模拟填充右列从上到下(左闭右开)
            for (i; i < n - offset; i++) {
                res[i][j] = count++;
            }
            // 模拟填充下行从右到左(左闭右开)
            for (; j > starty; j--) {
                res[i][j] = count++;
            }
            // 模拟填充左列从下到上(左闭右开)
            for (; i > startx; i--) {
                res[i][j] = count++;
            }

            // 第二圈开始的时候，起始位置要各自加1， 例如：第一圈起始位置是(0, 0)，第二圈起始位置是(1, 1)
            startx++;
            starty++;

            // offset 控制每一圈里每一条边遍历的长度
            offset += 1;
        }

        // 如果n为奇数的话，需要单独给矩阵最中间的位置赋值
        if (n % 2) {
            res[mid][mid] = count;
        }
        return res;
    }
};

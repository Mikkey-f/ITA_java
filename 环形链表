环形链表：
（1）判断是否有环 （2）找出环的入口
x为指针到入口的距离，y为入口到两指针相遇的距离，z为环剩下的距离
slow=x+y;
fast=x+y+n(y+z);          2*slow=fast
x=n(y+z)-y;     x=(n-1)(y+z)-z;   n=1---->x=z;
思路：
fast=head;
slow=head;
while (fast != NULL && fast->next != NULL) {
    slow = slow->next;
    fast = fast->next->next;
      if (slow == fast) {
        ListNode* index1 = fast;
        ListNode* index2 = head;
        while (index1 != index2) {
            index1 = index1->next;
            index2 = index2->next;
        }
        return index2; 
    }
}
return NULL;

完整代码：

public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {// 有环
                ListNode index1 = fast;
                ListNode index2 = head;
                // 两个指针，从头结点和相遇结点，各走一步，直到相遇，相遇点即为环入口
                while (index1 != index2) {
                    index1 = index1.next;
                    index2 = index2.next;
                }
                return index1;
            }
        }
        return null;
    }
}
